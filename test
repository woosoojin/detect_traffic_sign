#!/usr/bin/env python

# Copyright (c) 2011, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#    * Neither the name of the Willow Garage, Inc. nor the names of its
#      contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import rospy, roslaunch
import sys, select, os
import time
from std_msgs.msg import String


uuid = roslaunch.rlutil.get_or_generate_uuid(None, False)    
ros_package_path = os.path.dirname(os.path.realpath(__file__))
ros_package_path = ros_package_path.replace('turtlebot3_autorace_detect/nodes', '')

detected = 'None'

def callback(data):
  rospy.loginfo(rospy.get_caller_id() + "I got %s", data.data)
  detected = data.data

def contoller():
  #rospy.init_node('mode', anonymous=True)
  #about(detected)
  rospy.Subscriber('mode_change', String, callback)
  rospy.spin()

def launcher_func(detected):
  if detected == 'child':
    school_zone = roslaunch.scriptapi.ROSLaunch()
    school_zone = roslaunch.parent.ROSLaunchParent(uuid, [ros_package_path + "turtlebot3_autorace_detect/launch/turtlebot3_teleop_key.launch"])
    school_zone.start()

  

"""
class Decide():
  def __init__(self):

    self.uuid = roslaunch.rlutil.get_or_generate_uuid(None, False)    
    self.select = 0
    self.ros_package_path = os.path.dirname(os.path.realpath(__file__))
    self.ros_package_path = self.ros_package_path.replace('turtlebot3_autorace_detect/nodes', '')



  def mode_controll(self):
    self.launch_detect_stop = roslaunch.scriptapi.ROSLaunch()
    self.launch_detect_stop = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "turtlebot3_autorace_detect/launch/turtlebot3_teleop_key.launch"])
    self.launch_detect_stop.start()
    #time.sleep(3)
    #self.launch_detect_stop.shutdown()
    rospy.spin()
  
  def main(self):
    rospy.spin()


  def callback(self, data):
    rospy.loginfo(rospy.get_caller_id() + "I got %s", data.data)

    if(data.data == 'child'):
      self.launch_detect_stop = roslaunch.scriptapi.ROSLaunch()
      self.launch_detect_stop = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "turtlebot3_autorace_detect/launch/turtlebot3_teleop_key.launch"])
      self.launch_detect_stop.start()

  def contoller(self):
    #rospy.init_node('mode_change', anonymous=True)
    rospy.Subscriber('mode_change', String, Decide().callback)
    
    #rospy.spin()

"""
  

if __name__ == '__main__':
    rospy.init_node('mode')
    #callback()
    contoller()
    #node.contoller()
    #node.main()